branches:
  only:
  - fathon-dev

env:
  global:
    - CIBW_BUILD_VERBOSITY=1
    - CIBW_TEST_REQUIRES=pytest
    - CIBW_TEST_COMMAND="pytest {project}/tests"
    - CIBW_BEFORE_BUILD="pip3 install -r requirements.txt"

matrix:
  include:
    ##### Linux #####
    ##### ARM #####
    ### 3.7 ###
    #- name: "Python 3.7 on Linux arm64"
    #  arch:
    #    - arm64
    #  env:
    #    - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
    #    - CIBW_BUILD="cp37-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.8 ###
    #- name: "Python 3.8 on Linux arm64"
    #  arch:
    #    - arm64
    #  env:
    #    - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
    #    - CIBW_BUILD="cp38-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.9 ###
    #- name: "Python 3.9 on Linux arm64"
    #  arch:
    #    - arm64
    #  env:
    #    - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
    #    - CIBW_BUILD="cp39-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.10 ###
    - name: "Python 3.10 on Linux arm64"
      arch:
        - arm64
      env:
        - CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        - CIBW_BUILD="cp310-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      sudo: required
      python: "3.8"
      services:
        - docker
    ##### x86_64 #####
    ### 3.7 ###
    #- name: "Python 3.7 on Linux amd64"
    #  arch:
    #    - amd64
    #  env:
    #    - CIBW_BUILD="cp37-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.8 ###
    #- name: "Python 3.8 on Linux amd64"
    #  arch:
    #    - amd64
    #  env:
    #    - CIBW_BUILD="cp38-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.9 ###
    #- name: "Python 3.9 on Linux amd64"
    #  arch:
    #    - amd64
    #  env:
    #    - CIBW_BUILD="cp39-manylinux*"
    #    - CIBW_SKIP: "*-manylinux_i686"
    #  language: python
    #  dist: bionic
    #  sudo: required
    #  python: "3.8"
    #  services:
    #    - docker
    ### 3.10 ###
    - name: "Python 3.10 on Linux amd64"
      arch:
        - amd64
      env:
        - CIBW_BUILD="cp310-manylinux*"
        - CIBW_SKIP: "*-manylinux_i686"
      language: python
      dist: bionic
      sudo: required
      python: "3.8"
      services:
        - docker
    ##### macOS #####
    ### 3.7 ###
    #- name: "Python 3.7 on macOS 10.14"
    #  env:
    #    - CIBW_BUILD="cp37-macosx*"
    #  os: osx
    #  osx_image: xcode11
    #  language: shell
    ### 3.8 ###
    #- name: "Python 3.8 on macOS 10.14"
    #  env:
    #    - CIBW_BUILD="cp38-macosx*"
    #  os: osx
    #  osx_image: xcode11
    #  language: shell
    ### 3.9 ###
    #- name: "Python 3.9 on macOS 10.14"
    #  env:
    #    - CIBW_BUILD="cp39-macosx*"
    #  os: osx
    #  osx_image: xcode11
    #  language: shell
    ### 3.10 ###
    - name: "Python 3.10 on macOS 10.14"
      env:
        - CIBW_BUILD="cp310-macosx*"
      os: osx
      osx_image: xcode11
      language: shell

before_install:
  - python3 --version

install:
  - pip3 install --upgrade cibuildwheel

script:
  - cibuildwheel --output-dir wheelhouse
  - ls wheelhouse
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip3 install --upgrade pip;
      pip3 install --upgrade --upgrade-strategy eager twine;
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      pip install twine;
    fi
  - if [ "$PYPI_UPLOAD" = "test" ]; then
      twine upload --skip-existing wheelhouse/* --repository-url https://test.pypi.org/legacy/ -u ${TEST_PYPI_USR} -p ${TEST_PYPI_PWD};
    elif [ "$PYPI_UPLOAD" = "release" ]; then
      twine upload --skip-existing wheelhouse/* -u ${PYPI_USR} -p ${PYPI_PWD};
    fi
