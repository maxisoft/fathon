name: Windows CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      generate-attestation:
        description: 'Generate SLSA build provenance attestation'
        required: true
        type: boolean
        default: false

jobs:
  build:
    permissions:
      id-token: write # Required for OIDC token
      contents: read   # Required to read source code
      attestations: write # Required to write attestations

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13', '3.x']

    steps:
    - uses: actions/checkout@v4

    - name: Set up uv and Python
      uses: astral-sh/setup-uv@v1
      with:
        python-version: ${{ matrix.python-version }}
        enable-cache: true

    - name: Cache vcpkg dependencies
      uses: actions/cache@v4
      with:
        # The path to the directory where vcpkg installs the libraries
        path: ${{ github.workspace }}/vcpkg/installed
        # The key is composed of the runner OS, the hash of the vcpkg manifest,
        # and the pinned vcpkg commit ID to ensure the cache is specific and reproducible.
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-${{ '120deac3062162151622ca4860575a33844ba10b' }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-

    - name: Attempt to install GSL with pinned vcpkg
      id: vcpkg_pinned
      uses: lukka/run-vcpkg@v11
      with:
        runVcpkgInstall: true
        vcpkgGitCommitId: '120deac3062162151622ca4860575a33844ba10b'
      continue-on-error: true

    - name: Attempt to install GSL with latest vcpkg (on failure)
      id: vcpkg_latest
      if: steps.vcpkg_pinned.outcome == 'failure'
      uses: lukka/run-vcpkg@v11
      with:
        runVcpkgInstall: true # No commit ID, so it uses the latest vcpkg

    - name: Set GSL_DIR Environment Variable
      shell: pwsh
      run: |
        if ($env:VCPKG_ROOT -eq $null) {
          echo "::error::vcpkg installation failed, VCPKG_ROOT is not set."
          exit 1
        }
        $gsl_dir = "$($env:VCPKG_ROOT)/installed/$($env:VCPKG_DEFAULT_TRIPLET)"
        echo "GSL_DIR=$gsl_dir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "GSL_DIR permanently set for this job: $gsl_dir"

    - name: Install Python dependencies
      run: uv pip install cython wheel pytest setuptools

    - name: Build fathon wheel
      # Use --no-isolation to make the GSL_DIR env var available to setup.py
      run: uv wheel . -w dist --verbose --no-isolation

    - name: Generate artifact attestation
      if: github.event_name == 'workflow_dispatch' && inputs.generate-attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: "dist/*.whl"

    - name: Install fathon from wheel
      run: uv pip install dist/*.whl

    - name: Run tests
      # Use 'uv run' to execute tests within the uv-managed environment
      run: uv run pytest tests/

    - name: Upload Wheel Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fathon-wheel-${{ matrix.python-version }}
        path: dist/

    - name: Upload GSL Library Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gsl-libs-${{ matrix.python-version }}
        path: ${{ env.GSL_DIR }}
