name: Windows CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      generate-attestation:
        description: 'Generate SLSA build provenance attestation'
        required: true
        type: boolean
        default: false
      vcpkg-commit-id:
        description: 'Optional vcpkg commit ID to use for the build'
        required: false
        type: string
        default: '120deac3062162151622ca4860575a33844ba10b'
      vs-version:
        description: 'Optional Visual Studio version range (e.g., "[17.0,18.0)")'
        required: false
        type: string
        default: ''

jobs:
  build:
    permissions:
      id-token: write # Required for OIDC token
      contents: read   # Required to read source code
      attestations: write # Required to write attestations

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13', 'latest']

    env:
      # ðŸ‘‡ Force triplet for all vcpkg installs
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows-static

    steps:
    - uses: actions/checkout@v4

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: ${{ inputs.vs-version }}

    - name: Set up uv and Python
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true
        
    - name: Install python & Create Virtual Environment
      if: matrix.python-version == 'latest'
      run: |
        uv python list
        uv python install
        uv venv

    - name: Create Virtual Environment
      if: matrix.python-version != 'latest'
      run: uv venv --python "${{ matrix.python-version }}"

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg/installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-${{ inputs.vcpkg-commit-id }}-${{ inputs.vs-version }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-${{ inputs.vcpkg-commit-id }}-

    - name: Attempt to install GSL with pinned vcpkg
      id: vcpkg_pinned
      uses: lukka/run-vcpkg@v11
      with:
        runVcpkgInstall: true
        vcpkgGitCommitId: ${{ inputs.vcpkg-commit-id || '120deac3062162151622ca4860575a33844ba10b' }}
      continue-on-error: true

    - name: Attempt to install GSL with latest vcpkg (on failure)
      id: vcpkg_latest
      if: steps.vcpkg_pinned.outcome == 'failure'
      uses: lukka/run-vcpkg@v11

    - name: Verify vcpkg installation
      if: steps.vcpkg_latest.outcome == 'failure' && steps.vcpkg_pinned.outcome == 'failure'
      run: |
        echo "::error::Both pinned and latest vcpkg installations failed."
        exit 1

    - name: Set GSL_DIR Environment Variable
      shell: python
      run: |
        import os
        import sys
        from pathlib import Path

        vcpkg_install_root = '${{ env.RUNVCPKG_VCPKG_ROOT || env.VCPKG_ROOT }}'
        if not vcpkg_install_root:
            print("::error::RUNVCPKG_VCPKG_ROOT environment variable is not set. This indicates a problem with the vcpkg installation step.")
            sys.exit(1)

        vcpkg_triplet = '${{ env.VCPKG_DEFAULT_TRIPLET || env.VCPKG_DEFAULT_HOST_TRIPLET }}'
        gsl_dir = Path(vcpkg_install_root) / 'installed' / vcpkg_triplet

        github_env_file = os.environ["GITHUB_ENV"]
        with open(github_env_file, "a", encoding="utf-8") as f:
            f.write(f"GSL_DIR={gsl_dir}\n")

        print(f"GSL_DIR successfully set for this job: {gsl_dir}")

    - name: Install Python dependencies
      run: uv pip install cython wheel pytest setuptools

    - name: Build fathon wheel
      # Use --no-build-isolation to make the GSL_DIR env var available to setup.py
      run: uv run python -m pip wheel . --no-build-isolation -w dist

    - name: Generate artifact attestation
      if: github.event_name == 'workflow_dispatch' && inputs.generate-attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: "dist/*.whl"

    - name: Install fathon from wheel
      run: uv pip install dist/*.whl

    - name: Run tests
      run: uv run pytest tests/

    - name: Upload Wheel Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fathon-wheel-${{ matrix.python-version }}
        path: dist/

    - name: Upload GSL Library Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gsl-libs-${{ matrix.python-version }}
        path: ${{ env.GSL_DIR }}
